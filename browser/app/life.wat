
(module
    (import "std" "sleep" (func $sleep (param i32)))
    (import "std" "readln" (func $readln (param i32) (param i32) (result i32)))
    (import "std" "_ln" (func $_ln))
    (import "std" "_print" (func $_print (param i32) (param i32)))
    (import "std" "_println" (func $_println (param i32) (param i32)))
    (import "std" "print_int" (func $print_int (param i32)))
    (import "std" "print_real" (func $print_real (param f32)))
    (import "std" "println_int" (func $println_int (param i32)))
    (import "std" "println_real" (func $println_real (param f32)))
    (import "std" "print_int_pad" (func $print_int_pad (param i32) (param i32)))
    (import "std" "print_real_pad" (func $print_real_pad (param f32) (param i32)))

    (export "memory" (memory $mem))
    (export "str_len" (func $str_len))
    (export "str_copy" (func $str_copy))
    (export "str_end" (func $str_end))
    (export "str_cat" (func $str_cat))
  
    (export "main" (func $main))
    (export "start" (func $start))
    (export "loop" (func $loop))

    (func $str_len (param $po i32) (result i32)
        (local $idx i32)
        (block $out
            (loop $loop
                local.get $po
                local.get $idx
                i32.add
                i32.load8_u
                i32.eqz
                br_if $out
                local.get $idx
                i32.const 1
                i32.add
                local.set $idx
                br $loop
            )
        )
        local.get $idx
    )
    (func $str_copy (param $dest i32) (param $src i32)
        (local $c i32)
        (block $out
            (loop $loop
                local.get $src
                i32.load8_u
                local.tee $c
                i32.eqz
                br_if $out
                local.get $dest
                local.get $c
                i32.store8
                local.get $src
                i32.const 1
                i32.add
                local.set $src
                local.get $dest
                i32.const 1
                i32.add
                local.set $dest
                br $loop
            )
        )
    )
    (func $str_end (param $po i32) (result i32)
        (block $out
            (loop $loop
                local.get $po
                i32.load8_u
                i32.eqz
                br_if $out
                local.get $po
                i32.const 1
                i32.add
                local.set $po
                br $loop
            )
        )
        local.get $po
    )
    (func $print (param $po i32)
        local.get $po
        local.get $po
        call $str_len
        call $_print
    )
    (func $println (param $po i32)
        local.get $po
        call $print
        call $_ln
    )
    (func $str_cat (param $dest i32) (param $src i32)
        local.get $dest
        call $str_end
        local.get $src
        call $str_copy
    )

(memory $mem 16)
(global $fp (mut i32) (i32.const 8216))
(global $sp (mut i32) (i32.const 8216))

(global $temp_i32 (mut i32) (i32.const 0))
(global $temp_f32 (mut f32) (f32.const 0))

(data (i32.const 0) "x")
(data (i32.const 8) " ")
  (func $rand
  (result i32)
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 1 (ExprStmt (= "[integer]" (Var "___rand_counter" "0,11" "[integer]") (+ "[integer]" (Var "___rand_counter" "0,11" "[integer]") (Integer "[integer]" 1)))) (return (Var "___rand_counter" "0,11" "[integer]")))
  ;; {
    ;; (ExprStmt (= "[integer]" (Var "___rand_counter" "0,11" "[integer]") (+ "[integer]" (Var "___rand_counter" "0,11" "[integer]") (Integer "[integer]" 1))))
    (i32.const 16)
    (i32.const 16)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (return (Var "___rand_counter" "0,11" "[integer]"))
    (i32.const 16)
    (i32.load)
    (return)
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $srand
  (param i32)
  (get_global $sp)
  (i32.const 8)
  (i32.add)
  (set_global $sp)
  ;; s
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; (Block 2 (ExprStmt (= "[integer]" (Var "___rand_counter" "0,11" "[integer]") (Var "s" "2,0" "[integer]"))))
  ;; {
    ;; (ExprStmt (= "[integer]" (Var "___rand_counter" "0,11" "[integer]") (Var "s" "2,0" "[integer]")))
    (i32.const 16)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
  ;; }
  (get_global $sp)
  (i32.const 8)
  (i32.sub)
  (set_global $sp)
  )

  (func $limit
  (param i32)
  (result i32)
  (get_global $sp)
  (i32.const 12)
  (i32.add)
  (set_global $sp)
  ;; x
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; (Block 3 (Block (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (Var "x" "3,0" "[integer]")))) (IfStmt (< "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 0)) (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (+ "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32))))) (IfStmt (>= "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (- "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32))))) (return (Var "i" "3,1" "[integer]")))
  ;; {
    ;; (Block (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (Var "x" "3,0" "[integer]"))))
    ;; {
      ;; (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (Var "x" "3,0" "[integer]")))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.load)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
    ;; }
    ;; (IfStmt (< "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 0)) (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (+ "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32)))))
    (block $b0
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 0)
    (i32.lt_s)
    (i32.eqz)
    (br_if $b0)
    ;; (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (+ "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32))))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 32)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    )
    ;; (IfStmt (>= "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (- "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32)))))
    (block $b1
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 32)
    (i32.ge_s)
    (i32.eqz)
    (br_if $b1)
    ;; (ExprStmt (= "[integer]" (Var "i" "3,1" "[integer]") (- "[integer]" (Var "i" "3,1" "[integer]") (Integer "[integer]" 32))))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 32)
    (i32.sub)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    )
    ;; (return (Var "i" "3,1" "[integer]"))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (return)
  ;; }
  (get_global $sp)
  (i32.const 12)
  (i32.sub)
  (set_global $sp)
  )

  (func $adjacent_to
  (param i32)
  (param i32)
  (result i32)
  (get_global $sp)
  (i32.const 32)
  (i32.add)
  (set_global $sp)
  ;; i
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; j
  (get_global $fp)
  (i32.const 8)
  (i32.add)
  (get_local 1)
  (i32.store)
  ;; (Block 4 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 0))) (ForStmt (ExprStmt (= "[integer]" (Var "k" "4,2" "[integer]") (- "[integer]" (Integer "[integer]" 1)))) (<= "[integer]" (Var "k" "4,2" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "k" "4,2" "[integer]") (+ "[integer]" (Var "k" "4,2" "[integer]") (Integer "[integer]" 1)))) (Block 5 (ForStmt (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (- "[integer]" (Integer "[integer]" 1)))) (<= "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (+ "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)))) (Block 6 (IfStmt (|| "[integer]" (Var "k" "4,2" "[integer]") (Var "l" "4,3" "[integer]")) (Block 7 (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))) (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))) (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1)))))))))))) (return (Var "count" "4,4" "[integer]")))
  ;; {
    ;; (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 20)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "k" "4,2" "[integer]") (- "[integer]" (Integer "[integer]" 1)))) (<= "[integer]" (Var "k" "4,2" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "k" "4,2" "[integer]") (+ "[integer]" (Var "k" "4,2" "[integer]") (Integer "[integer]" 1)))) (Block 5 (ForStmt (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (- "[integer]" (Integer "[integer]" 1)))) (<= "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (+ "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)))) (Block 6 (IfStmt (|| "[integer]" (Var "k" "4,2" "[integer]") (Var "l" "4,3" "[integer]")) (Block 7 (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))) (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))) (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1))))))))))))
    ;; (ExprStmt (= "[integer]" (Var "k" "4,2" "[integer]") (- "[integer]" (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.const 0)
    (i32.const 1)
    (i32.sub)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.le_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 5 (ForStmt (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (- "[integer]" (Integer "[integer]" 1)))) (<= "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (+ "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)))) (Block 6 (IfStmt (|| "[integer]" (Var "k" "4,2" "[integer]") (Var "l" "4,3" "[integer]")) (Block 7 (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))) (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))) (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1)))))))))))
    ;; {
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (- "[integer]" (Integer "[integer]" 1)))) (<= "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (+ "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1)))) (Block 6 (IfStmt (|| "[integer]" (Var "k" "4,2" "[integer]") (Var "l" "4,3" "[integer]")) (Block 7 (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))) (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))) (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1))))))))))
      ;; (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (- "[integer]" (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 16)
      (i32.add)
      (i32.const 0)
      (i32.const 1)
      (i32.sub)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 16)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.le_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 6 (IfStmt (|| "[integer]" (Var "k" "4,2" "[integer]") (Var "l" "4,3" "[integer]")) (Block 7 (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))) (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))) (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1)))))))))
      ;; {
        ;; (IfStmt (|| "[integer]" (Var "k" "4,2" "[integer]") (Var "l" "4,3" "[integer]")) (Block 7 (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))) (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))) (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1))))))))
        (block $b0
        (block $v0 (result i32)
        (i32.const 1)
          (get_global $fp)
          (i32.const 12)
          (i32.add)
          (i32.load)
        (br_if $v0)
        (drop)
          (get_global $fp)
          (i32.const 16)
          (i32.add)
          (i32.load)
        )
        (i32.eqz)
        (br_if $b0)
        ;; (Block 7 (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))) (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))) (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1)))))))
        ;; {
          ;; (Block (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]")))))))
          ;; {
            ;; (ExprStmt (= "[integer]" (Var "ii" "7,0" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "i" "4,0" "[integer]") (Var "k" "4,2" "[integer]"))))))
            (get_global $fp)
            (i32.const 24)
            (i32.add)
            (get_global $fp)
            (i32.const 4)
            (i32.add)
            (i32.load)
            (get_global $fp)
            (i32.const 12)
            (i32.add)
            (i32.load)
            (i32.add)
            (get_global $sp)
            (get_global $fp)
            (i32.store)
            (get_global $sp)
            (set_global $fp)
            (call $limit)
            (get_global $fp)
            (get_global $fp)
            (i32.load)
            (set_global $fp)
            (set_global $sp)
            (set_global $temp_i32)
            (get_global $temp_i32)
            (i32.store)
            (get_global $temp_i32)
            (drop)
          ;; }
          ;; (Block (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]")))))))
          ;; {
            ;; (ExprStmt (= "[integer]" (Var "jj" "7,1" "[integer]") ("f(x)" "[integer]" (Var "limit" "0,15" "[(integer x)integer]") ( (+ "[integer]" (Var "j" "4,1" "[integer]") (Var "l" "4,3" "[integer]"))))))
            (get_global $fp)
            (i32.const 28)
            (i32.add)
            (get_global $fp)
            (i32.const 8)
            (i32.add)
            (i32.load)
            (get_global $fp)
            (i32.const 16)
            (i32.add)
            (i32.load)
            (i32.add)
            (get_global $sp)
            (get_global $fp)
            (i32.store)
            (get_global $sp)
            (set_global $fp)
            (call $limit)
            (get_global $fp)
            (get_global $fp)
            (i32.load)
            (set_global $fp)
            (set_global $sp)
            (set_global $temp_i32)
            (get_global $temp_i32)
            (i32.store)
            (get_global $temp_i32)
            (drop)
          ;; }
          ;; (IfStmt (v[x] "[integer]" (Var "jj" "7,1" "[integer]") (v[x] "[[32]integer]" (Var "ii" "7,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1))))))
          (block $b1
          (i32.const 20)
          (i32.const 128)
          (get_global $fp)
          (i32.const 24)
          (i32.add)
          (i32.load)
          (i32.mul)
          (i32.add)
          (i32.const 4)
          (get_global $fp)
          (i32.const 28)
          (i32.add)
          (i32.load)
          (i32.mul)
          (i32.add)
          (i32.load)
          (i32.eqz)
          (br_if $b1)
          ;; (Block 8 (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1)))))
          ;; {
            ;; (ExprStmt (= "[integer]" (Var "count" "4,4" "[integer]") (+ "[integer]" (Var "count" "4,4" "[integer]") (Integer "[integer]" 1))))
            (get_global $fp)
            (i32.const 20)
            (i32.add)
            (get_global $fp)
            (i32.const 20)
            (i32.add)
            (i32.load)
            (i32.const 1)
            (i32.add)
            (set_global $temp_i32)
            (get_global $temp_i32)
            (i32.store)
            (get_global $temp_i32)
            (drop)
          ;; }
          )
        ;; }
        )
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "l" "4,3" "[integer]") (+ "[integer]" (Var "l" "4,3" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 16)
      (i32.add)
      (get_global $fp)
      (i32.const 16)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "k" "4,2" "[integer]") (+ "[integer]" (Var "k" "4,2" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
    ;; (return (Var "count" "4,4" "[integer]"))
    (get_global $fp)
    (i32.const 20)
    (i32.add)
    (i32.load)
    (return)
  ;; }
  (get_global $sp)
  (i32.const 32)
  (i32.sub)
  (set_global $sp)
  )

  (func $play
  (get_global $sp)
  (i32.const 16)
  (i32.add)
  (set_global $sp)
  ;; (Block 9 (ForStmt (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (+ "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 1)))) (Block 10 (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 11 (Block (ExprStmt (= "[integer]" (Var "a" "11,0" "[integer]") ("f(x)" "[integer]" (Var "adjacent_to" "0,16" "[(integer i, integer j)integer]") ( (Var "i" "9,0" "[integer]") (Var "j" "9,1" "[integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 1)))) (IfStmt (< "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))) (IfStmt (> "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))))))) (ForStmt (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (+ "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 1)))) (Block 12 (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 13 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))))))))))
  ;; {
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (+ "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 1)))) (Block 10 (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 11 (Block (ExprStmt (= "[integer]" (Var "a" "11,0" "[integer]") ("f(x)" "[integer]" (Var "adjacent_to" "0,16" "[(integer i, integer j)integer]") ( (Var "i" "9,0" "[integer]") (Var "j" "9,1" "[integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 1)))) (IfStmt (< "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))) (IfStmt (> "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0))))))))
    ;; (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 32)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 10 (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 11 (Block (ExprStmt (= "[integer]" (Var "a" "11,0" "[integer]") ("f(x)" "[integer]" (Var "adjacent_to" "0,16" "[(integer i, integer j)integer]") ( (Var "i" "9,0" "[integer]") (Var "j" "9,1" "[integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 1)))) (IfStmt (< "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))) (IfStmt (> "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))))))
    ;; {
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 11 (Block (ExprStmt (= "[integer]" (Var "a" "11,0" "[integer]") ("f(x)" "[integer]" (Var "adjacent_to" "0,16" "[(integer i, integer j)integer]") ( (Var "i" "9,0" "[integer]") (Var "j" "9,1" "[integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 1)))) (IfStmt (< "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))) (IfStmt (> "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0))))))
      ;; (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 32)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 11 (Block (ExprStmt (= "[integer]" (Var "a" "11,0" "[integer]") ("f(x)" "[integer]" (Var "adjacent_to" "0,16" "[(integer i, integer j)integer]") ( (Var "i" "9,0" "[integer]") (Var "j" "9,1" "[integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]")))))) (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 1)))) (IfStmt (< "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))) (IfStmt (> "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))))
      ;; {
        ;; (Block (ExprStmt (= "[integer]" (Var "a" "11,0" "[integer]") ("f(x)" "[integer]" (Var "adjacent_to" "0,16" "[(integer i, integer j)integer]") ( (Var "i" "9,0" "[integer]") (Var "j" "9,1" "[integer]"))))))
        ;; {
          ;; (ExprStmt (= "[integer]" (Var "a" "11,0" "[integer]") ("f(x)" "[integer]" (Var "adjacent_to" "0,16" "[(integer i, integer j)integer]") ( (Var "i" "9,0" "[integer]") (Var "j" "9,1" "[integer]")))))
          (get_global $fp)
          (i32.const 12)
          (i32.add)
          (get_global $fp)
          (i32.const 4)
          (i32.add)
          (i32.load)
          (get_global $fp)
          (i32.const 8)
          (i32.add)
          (i32.load)
          (get_global $sp)
          (get_global $fp)
          (i32.store)
          (get_global $sp)
          (set_global $fp)
          (call $adjacent_to)
          (get_global $fp)
          (get_global $fp)
          (i32.load)
          (set_global $fp)
          (set_global $sp)
          (set_global $temp_i32)
          (get_global $temp_i32)
          (i32.store)
          (get_global $temp_i32)
          (drop)
        ;; }
        ;; (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))))))
        (block $b0
        (get_global $fp)
        (i32.const 12)
        (i32.add)
        (i32.load)
        (i32.const 2)
        (i32.eq)
        (i32.eqz)
        (br_if $b0)
        ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]")))))
        (i32.const 4116)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 20)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.load)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
        )
        ;; (IfStmt (== "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 1))))
        (block $b1
        (get_global $fp)
        (i32.const 12)
        (i32.add)
        (i32.load)
        (i32.const 3)
        (i32.eq)
        (i32.eqz)
        (br_if $b1)
        ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 1)))
        (i32.const 4116)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 1)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
        )
        ;; (IfStmt (< "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 2)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0))))
        (block $b2
        (get_global $fp)
        (i32.const 12)
        (i32.add)
        (i32.load)
        (i32.const 2)
        (i32.lt_s)
        (i32.eqz)
        (br_if $b2)
        ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))
        (i32.const 4116)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
        )
        ;; (IfStmt (> "[integer]" (Var "a" "11,0" "[integer]") (Integer "[integer]" 3)) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0))))
        (block $b3
        (get_global $fp)
        (i32.const 12)
        (i32.add)
        (i32.load)
        (i32.const 3)
        (i32.gt_s)
        (i32.eqz)
        (br_if $b3)
        ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))) (Integer "[integer]" 0)))
        (i32.const 4116)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
        )
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (+ "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (+ "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 1)))) (Block 12 (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 13 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]")))))))))
    ;; (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 32)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 12 (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 13 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))))))))
    ;; {
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1)))) (Block 13 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]")))))))
      ;; (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 32)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 13 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]"))))))
      ;; {
        ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (v[x] "[integer]" (Var "j" "9,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "9,0" "[integer]") (Var "newboard" "0,17" "[[32][32]integer]")))))
        (i32.const 20)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4116)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.load)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "j" "9,1" "[integer]") (+ "[integer]" (Var "j" "9,1" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "i" "9,0" "[integer]") (+ "[integer]" (Var "i" "9,0" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
  ;; }
  (get_global $sp)
  (i32.const 16)
  (i32.sub)
  (set_global $sp)
  )

  (func $print_board
  (get_global $sp)
  (i32.const 12)
  (i32.add)
  (set_global $sp)
  ;; (Block 14 (ForStmt (ExprStmt (= "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "14,1" "[integer]") (+ "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 1)))) (Block 15 (ForStmt (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (+ "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 1)))) (Block 16 (IfElseStmt (v[x] "[integer]" (Var "j" "14,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "14,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 17 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 18 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1")))))))) (ExprStmt ("f(x)" "[void]" (Var "_ln" "0,2" "[()void]") ())))))
  ;; {
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "j" "14,1" "[integer]") (+ "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 1)))) (Block 15 (ForStmt (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (+ "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 1)))) (Block 16 (IfElseStmt (v[x] "[integer]" (Var "j" "14,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "14,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 17 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 18 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1")))))))) (ExprStmt ("f(x)" "[void]" (Var "_ln" "0,2" "[()void]") ()))))
    ;; (ExprStmt (= "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 32)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 15 (ForStmt (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (+ "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 1)))) (Block 16 (IfElseStmt (v[x] "[integer]" (Var "j" "14,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "14,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 17 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 18 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1")))))))) (ExprStmt ("f(x)" "[void]" (Var "_ln" "0,2" "[()void]") ())))
    ;; {
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 32)) (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (+ "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 1)))) (Block 16 (IfElseStmt (v[x] "[integer]" (Var "j" "14,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "14,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 17 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 18 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1"))))))))
      ;; (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.load)
      (i32.const 32)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 16 (IfElseStmt (v[x] "[integer]" (Var "j" "14,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "14,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 17 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 18 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1")))))))
      ;; {
        ;; (IfElseStmt (v[x] "[integer]" (Var "j" "14,1" "[integer]") (v[x] "[[32]integer]" (Var "i" "14,0" "[integer]") (Var "board" "0,14" "[[32][32]integer]"))) (Block 17 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 18 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1"))))))
        (block $b0
        (block $b1
        (i32.const 20)
        (i32.const 128)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.load)
        (i32.eqz)
        (br_if $b1)
        ;; (Block 17 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0")))))
        ;; {
          ;; (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "0"))))
          (i32.const 0)
          (get_global $sp)
          (get_global $fp)
          (i32.store)
          (get_global $sp)
          (set_global $fp)
          (call $print)
          (get_global $fp)
          (get_global $fp)
          (i32.load)
          (set_global $fp)
          (set_global $sp)
        ;; }
        (br $b0)
        )
        ;; (Block 18 (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1")))))
        ;; {
          ;; (ExprStmt ("f(x)" "[void]" (Var "print" "0,3" "[(*char)void]") ( (String "[*char]" "1"))))
          (i32.const 8)
          (get_global $sp)
          (get_global $fp)
          (i32.store)
          (get_global $sp)
          (set_global $fp)
          (call $print)
          (get_global $fp)
          (get_global $fp)
          (i32.load)
          (set_global $fp)
          (set_global $sp)
        ;; }
        )
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "i" "14,0" "[integer]") (+ "[integer]" (Var "i" "14,0" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
      ;; (ExprStmt ("f(x)" "[void]" (Var "_ln" "0,2" "[()void]") ()))
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $_ln)
      (get_global $fp)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      (set_global $sp)
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "j" "14,1" "[integer]") (+ "[integer]" (Var "j" "14,1" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
  ;; }
  (get_global $sp)
  (i32.const 12)
  (i32.sub)
  (set_global $sp)
  )

  (func $start
  (result i32)
  (get_global $sp)
  (i32.const 12)
  (i32.add)
  (set_global $sp)
  ;; (Block 19 (ExprStmt (= "[integer]" (Var "loop_counter" "0,20" "[integer]") (Integer "[integer]" 0))) (Block (ExprStmt (= "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 4)))) (Block (ExprStmt (= "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 4)))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 2)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (+ "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 22))) (ExprStmt (= "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 10))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 2)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 3)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 4)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (+ "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 5)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 24))) (ExprStmt (= "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 24))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 2)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 3)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 4)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 5)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 3)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 5)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 2)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 3)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1))) (return (Integer "[integer]" 0)))
  ;; {
    ;; (ExprStmt (= "[integer]" (Var "loop_counter" "0,20" "[integer]") (Integer "[integer]" 0)))
    (i32.const 8212)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (Block (ExprStmt (= "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 4))))
    ;; {
      ;; (ExprStmt (= "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 4)))
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.const 4)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
    ;; }
    ;; (Block (ExprStmt (= "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 4))))
    ;; {
      ;; (ExprStmt (= "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 4)))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.const 4)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
    ;; }
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 0)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 2)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 2)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (+ "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 22)))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.const 22)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 10)))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.const 10)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 0)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 2)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 2)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 3)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 3)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 4)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 4)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (+ "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 5)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 5)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 24)))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.const 24)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 24)))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.const 24)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 0)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 2)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 2)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 3)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 3)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "y" "19,1" "[integer]") (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 4)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 4)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 5)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 5)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.sub)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 3)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 5)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 5)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 3)
    (i32.sub)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 1)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 0)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.sub)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 2)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 0)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 0)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 2)
    (i32.sub)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (- "[integer]" (Var "y" "19,1" "[integer]") (Integer "[integer]" 3)) (v[x] "[[32]integer]" (+ "[integer]" (Var "x" "19,0" "[integer]") (Integer "[integer]" 1)) (Var "board" "0,14" "[[32][32]integer]"))) (Integer "[integer]" 1)))
    (i32.const 20)
    (i32.const 128)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (i32.mul)
    (i32.add)
    (i32.const 4)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 3)
    (i32.sub)
    (i32.mul)
    (i32.add)
    (i32.const 1)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (return (Integer "[integer]" 0))
    (i32.const 0)
    (return)
  ;; }
  (get_global $sp)
  (i32.const 12)
  (i32.sub)
  (set_global $sp)
  )

  (func $loop
  (result i32)
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 20 (ExprStmt ("f(x)" "[void]" (Var "print_board" "0,19" "[()void]") ())) (ExprStmt ("f(x)" "[void]" (Var "play" "0,18" "[()void]") ())) (ExprStmt ("f(x)" "[void]" (Var "_ln" "0,2" "[()void]") ())) (IfStmt (>= "[integer]" (Var "loop_counter" "0,20" "[integer]") (Integer "[integer]" 500)) (Block 21 (return (Integer "[integer]" 0)))) (ExprStmt (= "[integer]" (Var "loop_counter" "0,20" "[integer]") (+ "[integer]" (Var "loop_counter" "0,20" "[integer]") (Integer "[integer]" 1)))) (return (Integer "[integer]" 1)))
  ;; {
    ;; (ExprStmt ("f(x)" "[void]" (Var "print_board" "0,19" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $print_board)
    (get_global $fp)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    (set_global $sp)
    ;; (ExprStmt ("f(x)" "[void]" (Var "play" "0,18" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $play)
    (get_global $fp)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    (set_global $sp)
    ;; (ExprStmt ("f(x)" "[void]" (Var "_ln" "0,2" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $_ln)
    (get_global $fp)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    (set_global $sp)
    ;; (IfStmt (>= "[integer]" (Var "loop_counter" "0,20" "[integer]") (Integer "[integer]" 500)) (Block 21 (return (Integer "[integer]" 0))))
    (block $b0
    (i32.const 8212)
    (i32.load)
    (i32.const 500)
    (i32.ge_s)
    (i32.eqz)
    (br_if $b0)
    ;; (Block 21 (return (Integer "[integer]" 0)))
    ;; {
      ;; (return (Integer "[integer]" 0))
      (i32.const 0)
      (return)
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "loop_counter" "0,20" "[integer]") (+ "[integer]" (Var "loop_counter" "0,20" "[integer]") (Integer "[integer]" 1))))
    (i32.const 8212)
    (i32.const 8212)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (return (Integer "[integer]" 1))
    (i32.const 1)
    (return)
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $main
  (result i32)
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 22 (ExprStmt ("f(x)" "[integer]" (Var "start" "0,21" "[()integer]") ())) (WhileStmt (Integer "[integer]" 1) (Block 23 (ExprStmt ("f(x)" "[integer]" (Var "loop" "0,22" "[()integer]") ())) (ExprStmt ("f(x)" "[void]" (Var "sleep" "0,0" "[(integer)void]") ( (Integer "[integer]" 200)))))) (return (Integer "[integer]" 0)))
  ;; {
    ;; (ExprStmt ("f(x)" "[integer]" (Var "start" "0,21" "[()integer]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $start)
    (get_global $fp)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    (set_global $sp)
    (drop)
    ;; (WhileStmt (Integer "[integer]" 1) (Block 23 (ExprStmt ("f(x)" "[integer]" (Var "loop" "0,22" "[()integer]") ())) (ExprStmt ("f(x)" "[void]" (Var "sleep" "0,0" "[(integer)void]") ( (Integer "[integer]" 200))))))
    (block $loopbrk0
    (loop $loop0
    (i32.const 1)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 23 (ExprStmt ("f(x)" "[integer]" (Var "loop" "0,22" "[()integer]") ())) (ExprStmt ("f(x)" "[void]" (Var "sleep" "0,0" "[(integer)void]") ( (Integer "[integer]" 200)))))
    ;; {
      ;; (ExprStmt ("f(x)" "[integer]" (Var "loop" "0,22" "[()integer]") ()))
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $loop)
      (get_global $fp)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      (set_global $sp)
      (drop)
      ;; (ExprStmt ("f(x)" "[void]" (Var "sleep" "0,0" "[(integer)void]") ( (Integer "[integer]" 200))))
      (i32.const 200)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $sleep)
      (get_global $fp)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      (set_global $sp)
    ;; }
    (br $loop0)
    )
    )
    ;; (return (Integer "[integer]" 0))
    (i32.const 0)
    (return)
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

)
