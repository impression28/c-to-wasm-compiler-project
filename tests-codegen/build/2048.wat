
(module
    (import "std" "readln" (func $readln (param i32) (param i32) (result i32)))
    (import "std" "_ln" (func $_ln))
    (import "std" "_print" (func $_print (param i32) (param i32)))
    (import "std" "_println" (func $_println (param i32) (param i32)))
    (import "std" "print_int" (func $print_int (param i32)))
    (import "std" "print_real" (func $print_real (param f32)))
    (import "std" "println_int" (func $println_int (param i32)))
    (import "std" "println_real" (func $println_real (param f32)))
    (import "std" "print_int_pad" (func $print_int_pad (param i32) (param i32)))
    (import "std" "print_real_pad" (func $print_real_pad (param f32) (param i32)))

    (export "memory" (memory $mem))
    (export "str_len" (func $str_len))
    (export "str_copy" (func $str_copy))
    (export "str_end" (func $str_end))
    (export "str_cat" (func $str_cat))
    (export "main" (func $main))

    (memory $mem 1)

    (func $str_len (param $po i32) (result i32)
        (local $idx i32)
        (block $out
            (loop $loop
                local.get $po
                local.get $idx
                i32.add
                i32.load8_u
                i32.eqz
                br_if $out
                local.get $idx
                i32.const 1
                i32.add
                local.set $idx
                br $loop
            )
        )
        local.get $idx
    )
    (func $str_copy (param $dest i32) (param $src i32)
        (local $c i32)
        (block $out
            (loop $loop
                local.get $src
                i32.load8_u
                local.tee $c
                i32.eqz
                br_if $out
                local.get $dest
                local.get $c
                i32.store8
                local.get $src
                i32.const 1
                i32.add
                local.set $src
                local.get $dest
                i32.const 1
                i32.add
                local.set $dest
                br $loop
            )
        )
    )
    (func $str_end (param $po i32) (result i32)
        (block $out
            (loop $loop
                local.get $po
                i32.load8_u
                i32.eqz
                br_if $out
                local.get $po
                i32.const 1
                i32.add
                local.set $po
                br $loop
            )
        )
        local.get $po
    )
    (func $print (param $po i32)
        local.get $po
        local.get $po
        call $str_len
        call $_print
    )
    (func $println (param $po i32)
        local.get $po
        call $print
        call $_ln
    )
    (func $str_cat (param $dest i32) (param $src i32)
        local.get $dest
        call $str_end
        local.get $src
        call $str_copy
    )

(global $fp (mut i32) (i32.const 200))
(global $sp (mut i32) (i32.const 200))

(global $temp_i32 (mut i32) (i32.const 0))
(global $temp_f32 (mut f32) (f32.const 0))

(data (i32.const 0) "|")
(data (i32.const 8) " ")
(data (i32.const 16) "\n")
(data (i32.const 24) "-")
(data (i32.const 32) "\nPress Q to quit.\n")
(data (i32.const 56) "        ")
(data (i32.const 72) "GAME OVER\n")
(data (i32.const 88) "press R to start a new game\n")
  (func $clear_screen
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 1)
  ;; {
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $repeatPrint
  (param i32)
  (param i32)
  (get_global $sp)
  (i32.const 16)
  (i32.add)
  (set_global $sp)
  ;; c
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; n
  (get_global $fp)
  (i32.const 8)
  (i32.add)
  (get_local 1)
  (i32.store)
  ;; (Block 2 (ForStmt (ExprStmt (= "[integer]" (Var "i" "2,2" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "2,2" "[integer]") (Var "n" "2,1" "[integer]")) (ExprStmt (= "[integer]" (Var "i" "2,2" "[integer]") (+ "[integer]" (Var "i" "2,2" "[integer]") (Integer "[integer]" 1)))) (Block 3)))
  ;; {
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "2,2" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "2,2" "[integer]") (Var "n" "2,1" "[integer]")) (ExprStmt (= "[integer]" (Var "i" "2,2" "[integer]") (+ "[integer]" (Var "i" "2,2" "[integer]") (Integer "[integer]" 1)))) (Block 3))
    ;; (ExprStmt (= "[integer]" (Var "i" "2,2" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.load)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 3)
    ;; {
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "i" "2,2" "[integer]") (+ "[integer]" (Var "i" "2,2" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
  ;; }
  (get_global $sp)
  (i32.const 16)
  (i32.sub)
  (set_global $sp)
  )

  (func $table_vpadding
  (param i32)
  (get_global $sp)
  (i32.const 12)
  (i32.add)
  (set_global $sp)
  ;; r
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; (Block 4 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))) (ForStmt (ExprStmt (= "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "c" "4,1" "[integer]") (+ "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 1)))) (Block 5 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2")))))
  ;; {
    ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))
    (i32.const 0)
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $printf)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "c" "4,1" "[integer]") (+ "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 1)))) (Block 5 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))))
    ;; (ExprStmt (= "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 4)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 5 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))
    ;; {
      ;; (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8))))
      (i32.const 8)
      (i32.const 8)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $repeatPrint)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))
      (i32.const 0)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $printf)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "c" "4,1" "[integer]") (+ "[integer]" (Var "c" "4,1" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (get_global $fp)
    (i32.const 8)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
    ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2"))))
    (i32.const 16)
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $printf)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
  ;; }
  (get_global $sp)
  (i32.const 12)
  (i32.sub)
  (set_global $sp)
  )

  (func $table_hline
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 6 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "3") (Var "TABLE_WIDTH" "0,5" "[integer]")))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2")))))
  ;; {
    ;; (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "3") (Var "TABLE_WIDTH" "0,5" "[integer]"))))
    (i32.const 24)
    (i32.const 124)
    (i32.load)
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $repeatPrint)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2"))))
    (i32.const 16)
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $printf)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $render_table
  (get_global $sp)
  (i32.const 16)
  (i32.add)
  (set_global $sp)
  ;; (Block 7 (ExprStmt ("f(x)" "[void]" (Var "table_hline" "0,12" "[()void]") ())) (ForStmt (ExprStmt (= "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "r" "7,0" "[integer]") (+ "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 1)))) (Block 8 (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]")))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))) (ForStmt (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (+ "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 1)))) (Block 9 (Block (ExprStmt (= "[integer]" (Var "v" "9,0" "[integer]") (v[x] "[integer]" (Var "c" "7,1" "[integer]") (v[x] "[[4]integer]" (Var "r" "7,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfElseStmt (Var "v" "9,0" "[integer]") (Block 10 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 11 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2")))) (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]")))) (ExprStmt ("f(x)" "[void]" (Var "table_hline" "0,12" "[()void]") ())))))
  ;; {
    ;; (ExprStmt ("f(x)" "[void]" (Var "table_hline" "0,12" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $table_hline)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "r" "7,0" "[integer]") (+ "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 1)))) (Block 8 (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]")))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))) (ForStmt (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (+ "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 1)))) (Block 9 (Block (ExprStmt (= "[integer]" (Var "v" "9,0" "[integer]") (v[x] "[integer]" (Var "c" "7,1" "[integer]") (v[x] "[[4]integer]" (Var "r" "7,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfElseStmt (Var "v" "9,0" "[integer]") (Block 10 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 11 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2")))) (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]")))) (ExprStmt ("f(x)" "[void]" (Var "table_hline" "0,12" "[()void]") ()))))
    ;; (ExprStmt (= "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 4)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 8 (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]")))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))) (ForStmt (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (+ "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 1)))) (Block 9 (Block (ExprStmt (= "[integer]" (Var "v" "9,0" "[integer]") (v[x] "[integer]" (Var "c" "7,1" "[integer]") (v[x] "[[4]integer]" (Var "r" "7,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfElseStmt (Var "v" "9,0" "[integer]") (Block 10 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 11 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2")))) (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]")))) (ExprStmt ("f(x)" "[void]" (Var "table_hline" "0,12" "[()void]") ())))
    ;; {
      ;; (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]"))))
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.load)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $table_vpadding)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))
      (i32.const 0)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $printf)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (+ "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 1)))) (Block 9 (Block (ExprStmt (= "[integer]" (Var "v" "9,0" "[integer]") (v[x] "[integer]" (Var "c" "7,1" "[integer]") (v[x] "[[4]integer]" (Var "r" "7,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfElseStmt (Var "v" "9,0" "[integer]") (Block 10 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 11 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))))))
      ;; (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 4)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 9 (Block (ExprStmt (= "[integer]" (Var "v" "9,0" "[integer]") (v[x] "[integer]" (Var "c" "7,1" "[integer]") (v[x] "[[4]integer]" (Var "r" "7,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfElseStmt (Var "v" "9,0" "[integer]") (Block 10 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 11 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))))
      ;; {
        ;; (Block (ExprStmt (= "[integer]" (Var "v" "9,0" "[integer]") (v[x] "[integer]" (Var "c" "7,1" "[integer]") (v[x] "[[4]integer]" (Var "r" "7,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))))))
        ;; {
          ;; (ExprStmt (= "[integer]" (Var "v" "9,0" "[integer]") (v[x] "[integer]" (Var "c" "7,1" "[integer]") (v[x] "[[4]integer]" (Var "r" "7,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))
          (get_global $fp)
          (i32.const 12)
          (i32.add)
          (i32.const 136)
          (i32.const 16)
          (get_global $fp)
          (i32.const 4)
          (i32.add)
          (i32.load)
          (i32.mul)
          (i32.add)
          (i32.const 4)
          (get_global $fp)
          (i32.const 8)
          (i32.add)
          (i32.load)
          (i32.mul)
          (i32.add)
          (i32.load)
          (set_global $temp_i32)
          (get_global $temp_i32)
          (i32.store)
          (get_global $temp_i32)
          (drop)
        ;; }
        ;; (IfElseStmt (Var "v" "9,0" "[integer]") (Block 10 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))) (Block 11 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))))
        (block $b0
        (block $b1
        (get_global $fp)
        (i32.const 12)
        (i32.add)
        (i32.load)
        (i32.eqz)
        (br_if $b1)
        ;; (Block 10 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))
        ;; {
          ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))
          (i32.const 0)
          (get_global $sp)
          (get_global $fp)
          (i32.store)
          (get_global $sp)
          (set_global $fp)
          (call $printf)
          (get_global $fp)
          (i32.load)
          (set_global $fp)
        ;; }
        (br_if $b0)
        )
        ;; (Block 11 (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8)))) (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0")))))
        ;; {
          ;; (ExprStmt ("f(x)" "[void]" (Var "repeatPrint" "0,10" "[(*char c, integer n)void]") ( (String "[*char]" "1") (Integer "[integer]" 8))))
          (i32.const 8)
          (i32.const 8)
          (get_global $sp)
          (get_global $fp)
          (i32.store)
          (get_global $sp)
          (set_global $fp)
          (call $repeatPrint)
          (get_global $fp)
          (i32.load)
          (set_global $fp)
          ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "0"))))
          (i32.const 0)
          (get_global $sp)
          (get_global $fp)
          (i32.store)
          (get_global $sp)
          (set_global $fp)
          (call $printf)
          (get_global $fp)
          (i32.load)
          (set_global $fp)
        ;; }
        )
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "c" "7,1" "[integer]") (+ "[integer]" (Var "c" "7,1" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
      ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "2"))))
      (i32.const 16)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $printf)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      ;; (ExprStmt ("f(x)" "[void]" (Var "table_vpadding" "0,11" "[(integer r)void]") ( (Var "r" "7,0" "[integer]"))))
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.load)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $table_vpadding)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      ;; (ExprStmt ("f(x)" "[void]" (Var "table_hline" "0,12" "[()void]") ()))
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $table_hline)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "r" "7,0" "[integer]") (+ "[integer]" (Var "r" "7,0" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
  ;; }
  (get_global $sp)
  (i32.const 16)
  (i32.sub)
  (set_global $sp)
  )

  (func $render_info
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 12)
  ;; {
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $render_info_2
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 13 (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "4")))))
  ;; {
    ;; (ExprStmt ("f(x)" "[void]" (Var "printf" "0,2" "[(*char)void]") ( (String "[*char]" "4"))))
    (i32.const 32)
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $printf)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $render_game
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 14 (ExprStmt ("f(x)" "[void]" (Var "render_info" "0,14" "[()void]") ())) (ExprStmt ("f(x)" "[void]" (Var "render_table" "0,13" "[()void]") ())) (ExprStmt ("f(x)" "[void]" (Var "render_info_2" "0,15" "[()void]") ())))
  ;; {
    ;; (ExprStmt ("f(x)" "[void]" (Var "render_info" "0,14" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $render_info)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    ;; (ExprStmt ("f(x)" "[void]" (Var "render_table" "0,13" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $render_table)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    ;; (ExprStmt ("f(x)" "[void]" (Var "render_info_2" "0,15" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $render_info_2)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $count_empty_tiles
  (result i32)
  (get_global $sp)
  (i32.const 16)
  (i32.add)
  (set_global $sp)
  ;; (Block 15 (Block (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "15,0" "[integer]") (+ "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 1)))) (Block 16 (ForStmt (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (+ "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 1)))) (Block 17 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "15,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "15,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 18 (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1)))))))))) (return (Var "c" "15,2" "[integer]")))
  ;; {
    ;; (Block (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 0))))
    ;; {
      ;; (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 12)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
    ;; }
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "15,0" "[integer]") (+ "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 1)))) (Block 16 (ForStmt (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (+ "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 1)))) (Block 17 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "15,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "15,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 18 (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1))))))))))
    ;; (ExprStmt (= "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 4)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 16 (ForStmt (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (+ "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 1)))) (Block 17 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "15,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "15,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 18 (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1)))))))))
    ;; {
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (+ "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 1)))) (Block 17 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "15,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "15,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 18 (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1))))))))
      ;; (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 4)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 17 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "15,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "15,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 18 (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1)))))))
      ;; {
        ;; (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "15,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "15,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 18 (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1))))))
        (block $b0
        (i32.const 136)
        (i32.const 16)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.load)
        (i32.const 0)
        (i32.eq)
        (i32.eqz)
        (br_if $b0)
        ;; (Block 18 (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1)))))
        ;; {
          ;; (ExprStmt (= "[integer]" (Var "c" "15,2" "[integer]") (+ "[integer]" (Var "c" "15,2" "[integer]") (Integer "[integer]" 1))))
          (get_global $fp)
          (i32.const 12)
          (i32.add)
          (get_global $fp)
          (i32.const 12)
          (i32.add)
          (i32.load)
          (i32.const 1)
          (i32.add)
          (set_global $temp_i32)
          (get_global $temp_i32)
          (i32.store)
          (get_global $temp_i32)
          (drop)
        ;; }
        )
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "j" "15,1" "[integer]") (+ "[integer]" (Var "j" "15,1" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "i" "15,0" "[integer]") (+ "[integer]" (Var "i" "15,0" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
    ;; (return (Var "c" "15,2" "[integer]"))
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.load)
    (return)
  ;; }
  (get_global $sp)
  (i32.const 16)
  (i32.sub)
  (set_global $sp)
  )

  (func $insert_random_tile
  (get_global $sp)
  (i32.const 28)
  (i32.add)
  (set_global $sp)
  ;; (Block 19 (ExprStmt (= "[integer]" (Var "empt" "19,0" "[integer]") ("f(x)" "[integer]" (Var "count_empty_tiles" "0,17" "[()integer]") ()))) (IfStmt (Var "empt" "19,0" "[integer]") (Block 20 (ExprStmt (= "[integer]" (Var "n" "19,1" "[integer]") (% "[integer]" ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ()) (Var "empt" "19,0" "[integer]")))) (Block (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (+ "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 1)))) (Block 21 (ForStmt (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (+ "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 1)))) (Block 22 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1)))))))))))))
  ;; {
    ;; (ExprStmt (= "[integer]" (Var "empt" "19,0" "[integer]") ("f(x)" "[integer]" (Var "count_empty_tiles" "0,17" "[()integer]") ())))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $count_empty_tiles)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (IfStmt (Var "empt" "19,0" "[integer]") (Block 20 (ExprStmt (= "[integer]" (Var "n" "19,1" "[integer]") (% "[integer]" ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ()) (Var "empt" "19,0" "[integer]")))) (Block (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (+ "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 1)))) (Block 21 (ForStmt (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (+ "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 1)))) (Block 22 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1))))))))))))
    (block $b0
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.eqz)
    (br_if $b0)
    ;; (Block 20 (ExprStmt (= "[integer]" (Var "n" "19,1" "[integer]") (% "[integer]" ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ()) (Var "empt" "19,0" "[integer]")))) (Block (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (+ "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 1)))) (Block 21 (ForStmt (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (+ "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 1)))) (Block 22 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1)))))))))))
    ;; {
      ;; (ExprStmt (= "[integer]" (Var "n" "19,1" "[integer]") (% "[integer]" ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ()) (Var "empt" "19,0" "[integer]"))))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $rand)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
      (get_global $fp)
      (i32.const 4)
      (i32.add)
      (i32.load)
      (i32.rem_s)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      ;; (Block (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 0))))
      ;; {
        ;; (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 0)))
        (get_global $fp)
        (i32.const 20)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
      ;; }
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (+ "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 1)))) (Block 21 (ForStmt (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (+ "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 1)))) (Block 22 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1))))))))))
      ;; (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 12)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk0
      (loop $loopaux0
      (block $loop0
      (get_global $fp)
      (i32.const 12)
      (i32.add)
      (i32.load)
      (i32.const 4)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk0)
      ;; (Block 21 (ForStmt (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (+ "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 1)))) (Block 22 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1)))))))))
      ;; {
        ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (+ "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 1)))) (Block 22 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1))))))))
        ;; (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 0)))
        (get_global $fp)
        (i32.const 16)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
        (block $loopbrk1
        (loop $loopaux1
        (block $loop1
        (get_global $fp)
        (i32.const 16)
        (i32.add)
        (i32.load)
        (i32.const 4)
        (i32.lt_s)
        (i32.eqz)
        (br_if $loopbrk1)
        ;; (Block 22 (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1)))))))
        ;; {
          ;; (IfStmt (== "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)) (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1))))))
          (block $b1
          (i32.const 136)
          (i32.const 16)
          (get_global $fp)
          (i32.const 12)
          (i32.add)
          (i32.load)
          (i32.mul)
          (i32.add)
          (i32.const 4)
          (get_global $fp)
          (i32.const 16)
          (i32.add)
          (i32.load)
          (i32.mul)
          (i32.add)
          (i32.load)
          (i32.const 0)
          (i32.eq)
          (i32.eqz)
          (br_if $b1)
          ;; (Block 23 (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))) (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1)))))
          ;; {
            ;; (IfStmt (== "[integer]" (Var "c" "20,2" "[integer]") (Var "n" "19,1" "[integer]")) (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2)))))))
            (block $b2
            (get_global $fp)
            (i32.const 20)
            (i32.add)
            (i32.load)
            (get_global $fp)
            (i32.const 8)
            (i32.add)
            (i32.load)
            (i32.eq)
            (i32.eqz)
            (br_if $b2)
            ;; (Block 24 (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))) (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))))
            ;; {
              ;; (Block (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ()))))
              ;; {
                ;; (ExprStmt (= "[integer]" (Var "r" "24,0" "[integer]") ("f(x)" "[integer]" (Var "rand" "0,1" "[()integer]") ())))
                (get_global $fp)
                (i32.const 24)
                (i32.add)
                (get_global $sp)
                (get_global $fp)
                (i32.store)
                (get_global $sp)
                (set_global $fp)
                (call $rand)
                (get_global $fp)
                (i32.load)
                (set_global $fp)
                (set_global $temp_i32)
                (get_global $temp_i32)
                (i32.store)
                (get_global $temp_i32)
                (drop)
              ;; }
              ;; (IfElseStmt (== "[integer]" (% "[integer]" (Var "r" "24,0" "[integer]") (Integer "[integer]" 10)) (Integer "[integer]" 0)) (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))) (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2)))))
              (block $b3
              (block $b4
              (get_global $fp)
              (i32.const 24)
              (i32.add)
              (i32.load)
              (i32.const 10)
              (i32.rem_s)
              (i32.const 0)
              (i32.eq)
              (i32.eqz)
              (br_if $b4)
              ;; (Block 25 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4))))
              ;; {
                ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 4)))
                (i32.const 136)
                (i32.const 16)
                (get_global $fp)
                (i32.const 12)
                (i32.add)
                (i32.load)
                (i32.mul)
                (i32.add)
                (i32.const 4)
                (get_global $fp)
                (i32.const 16)
                (i32.add)
                (i32.load)
                (i32.mul)
                (i32.add)
                (i32.const 4)
                (set_global $temp_i32)
                (get_global $temp_i32)
                (i32.store)
                (get_global $temp_i32)
                (drop)
              ;; }
              (br_if $b3)
              )
              ;; (Block 26 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2))))
              ;; {
                ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "20,1" "[integer]") (v[x] "[[4]integer]" (Var "i" "20,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 2)))
                (i32.const 136)
                (i32.const 16)
                (get_global $fp)
                (i32.const 12)
                (i32.add)
                (i32.load)
                (i32.mul)
                (i32.add)
                (i32.const 4)
                (get_global $fp)
                (i32.const 16)
                (i32.add)
                (i32.load)
                (i32.mul)
                (i32.add)
                (i32.const 2)
                (set_global $temp_i32)
                (get_global $temp_i32)
                (i32.store)
                (get_global $temp_i32)
                (drop)
              ;; }
              )
            ;; }
            )
            ;; (ExprStmt (= "[integer]" (Var "c" "20,2" "[integer]") (+ "[integer]" (Var "c" "20,2" "[integer]") (Integer "[integer]" 1))))
            (get_global $fp)
            (i32.const 20)
            (i32.add)
            (get_global $fp)
            (i32.const 20)
            (i32.add)
            (i32.load)
            (i32.const 1)
            (i32.add)
            (set_global $temp_i32)
            (get_global $temp_i32)
            (i32.store)
            (get_global $temp_i32)
            (drop)
          ;; }
          )
        ;; }
        )
        ;; (ExprStmt (= "[integer]" (Var "j" "20,1" "[integer]") (+ "[integer]" (Var "j" "20,1" "[integer]") (Integer "[integer]" 1))))
        (get_global $fp)
        (i32.const 16)
        (i32.add)
        (get_global $fp)
        (i32.const 16)
        (i32.add)
        (i32.load)
        (i32.const 1)
        (i32.add)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
        (br $loopaux1)
        )
        )
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "i" "20,0" "[integer]") (+ "[integer]" (Var "i" "20,0" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 12)
      (i32.add)
      (get_global $fp)
      (i32.const 12)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux0)
      )
      )
    ;; }
    )
  ;; }
  (get_global $sp)
  (i32.const 28)
  (i32.sub)
  (set_global $sp)
  )

  (func $init_table
  (get_global $sp)
  (i32.const 4)
  (i32.add)
  (set_global $sp)
  ;; (Block 27 (ExprStmt ("f(x)" "[void]" (Var "insert_random_tile" "0,18" "[()void]") ())) (ExprStmt ("f(x)" "[void]" (Var "insert_random_tile" "0,18" "[()void]") ())))
  ;; {
    ;; (ExprStmt ("f(x)" "[void]" (Var "insert_random_tile" "0,18" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $insert_random_tile)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
    ;; (ExprStmt ("f(x)" "[void]" (Var "insert_random_tile" "0,18" "[()void]") ()))
    (get_global $sp)
    (get_global $fp)
    (i32.store)
    (get_global $sp)
    (set_global $fp)
    (call $insert_random_tile)
    (get_global $fp)
    (i32.load)
    (set_global $fp)
  ;; }
  (get_global $sp)
  (i32.const 4)
  (i32.sub)
  (set_global $sp)
  )

  (func $clean_table
  (get_global $sp)
  (i32.const 12)
  (i32.add)
  (set_global $sp)
  ;; (Block 28 (ForStmt (ExprStmt (= "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "28,0" "[integer]") (+ "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 1)))) (Block 29 (ForStmt (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (+ "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 1)))) (Block 30 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "29,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "28,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0))))))))
  ;; {
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "28,0" "[integer]") (+ "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 1)))) (Block 29 (ForStmt (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (+ "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 1)))) (Block 30 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "29,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "28,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)))))))
    ;; (ExprStmt (= "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 4)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 29 (ForStmt (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (+ "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 1)))) (Block 30 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "29,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "28,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0))))))
    ;; {
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (+ "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 1)))) (Block 30 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "29,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "28,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)))))
      ;; (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 4)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 30 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "29,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "28,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0))))
      ;; {
        ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "29,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "28,0" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Integer "[integer]" 0)))
        (i32.const 136)
        (i32.const 16)
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 8)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "j" "29,0" "[integer]") (+ "[integer]" (Var "j" "29,0" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
    ;; }
    )
    ;; (ExprStmt (= "[integer]" (Var "i" "28,0" "[integer]") (+ "[integer]" (Var "i" "28,0" "[integer]") (Integer "[integer]" 1))))
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.const 1)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (br $loopaux0)
    )
    )
  ;; }
  (get_global $sp)
  (i32.const 12)
  (i32.sub)
  (set_global $sp)
  )

  (func $update_record
  (param i32)
  (get_global $sp)
  (i32.const 8)
  (i32.add)
  (set_global $sp)
  ;; n
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; (Block 31 (ExprStmt (= "[integer]" (Var "record" "0,7" "[integer]") (Var "n" "31,0" "[integer]"))))
  ;; {
    ;; (ExprStmt (= "[integer]" (Var "record" "0,7" "[integer]") (Var "n" "31,0" "[integer]")))
    (i32.const 132)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
  ;; }
  (get_global $sp)
  (i32.const 8)
  (i32.sub)
  (set_global $sp)
  )

  (func $add_score
  (param i32)
  (get_global $sp)
  (i32.const 8)
  (i32.add)
  (set_global $sp)
  ;; n
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; (Block 32 (ExprStmt (= "[integer]" (Var "score" "0,6" "[integer]") (+ "[integer]" (Var "score" "0,6" "[integer]") (Var "n" "32,0" "[integer]")))) (IfStmt (> "[integer]" (Var "score" "0,6" "[integer]") (Var "record" "0,7" "[integer]")) (Block 33 (ExprStmt ("f(x)" "[void]" (Var "update_record" "0,21" "[(integer n)void]") ( (Var "score" "0,6" "[integer]")))))))
  ;; {
    ;; (ExprStmt (= "[integer]" (Var "score" "0,6" "[integer]") (+ "[integer]" (Var "score" "0,6" "[integer]") (Var "n" "32,0" "[integer]"))))
    (i32.const 128)
    (i32.const 128)
    (i32.load)
    (get_global $fp)
    (i32.const 4)
    (i32.add)
    (i32.load)
    (i32.add)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    ;; (IfStmt (> "[integer]" (Var "score" "0,6" "[integer]") (Var "record" "0,7" "[integer]")) (Block 33 (ExprStmt ("f(x)" "[void]" (Var "update_record" "0,21" "[(integer n)void]") ( (Var "score" "0,6" "[integer]"))))))
    (block $b0
    (i32.const 128)
    (i32.load)
    (i32.const 132)
    (i32.load)
    (i32.gt_s)
    (i32.eqz)
    (br_if $b0)
    ;; (Block 33 (ExprStmt ("f(x)" "[void]" (Var "update_record" "0,21" "[(integer n)void]") ( (Var "score" "0,6" "[integer]")))))
    ;; {
      ;; (ExprStmt ("f(x)" "[void]" (Var "update_record" "0,21" "[(integer n)void]") ( (Var "score" "0,6" "[integer]"))))
      (i32.const 128)
      (i32.load)
      (get_global $sp)
      (get_global $fp)
      (i32.store)
      (get_global $sp)
      (set_global $fp)
      (call $update_record)
      (get_global $fp)
      (i32.load)
      (set_global $fp)
    ;; }
    )
  ;; }
  (get_global $sp)
  (i32.const 8)
  (i32.sub)
  (set_global $sp)
  )

  (func $move_table_hor
  (param i32)
  (result i32)
  (get_global $sp)
  (i32.const 48)
  (i32.add)
  (set_global $sp)
  ;; dir
  (get_global $fp)
  (i32.const 4)
  (i32.add)
  (get_local 0)
  (i32.store)
  ;; (Block 34 (Block (ExprStmt (= "[integer]" (Var "moved" "34,1" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "i" "34,2" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "34,2" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "34,2" "[integer]") (+ "[integer]" (Var "i" "34,2" "[integer]") (Integer "[integer]" 1)))) (Block 35 (Block (ExprStmt (= "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 0))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 36 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")) (Integer "[integer]" 0))))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 37 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (Block 38 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]"))))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]")))))) (IfElseStmt (|| "[integer]" (! "[integer]" (Var "cur_tile" "35,1" "[integer]")) (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 40 (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfStmt (|| "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 41 (IfElseStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 42 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2)))) (ExprStmt ("f(x)" "[void]" (Var "add_score" "0,22" "[(integer n)void]") ( (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2))))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (IfStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 43 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))))))))))))) (IfStmt (Var "cur_tile" "35,1" "[integer]") (Block 44 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 45 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "c" "45,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]")))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (Var "c" "45,0" "[integer]") (Var "j" "35,3" "[integer]"))))) (IfStmt (|| "[integer]" (! "[integer]" (Var "moved" "34,1" "[integer]")) (== "[integer]" (v[x] "[integer]" (Var "c" "45,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")))) (ExprStmt (= "[integer]" (Var "moved" "34,1" "[integer]") (Integer "[integer]" 1)))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "c" "45,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")))))))) (return (Var "moved" "34,1" "[integer]")))
  ;; {
    ;; (Block (ExprStmt (= "[integer]" (Var "moved" "34,1" "[integer]") (Integer "[integer]" 0))))
    ;; {
      ;; (ExprStmt (= "[integer]" (Var "moved" "34,1" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 8)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
    ;; }
    ;; (ForStmt (ExprStmt (= "[integer]" (Var "i" "34,2" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "i" "34,2" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "i" "34,2" "[integer]") (+ "[integer]" (Var "i" "34,2" "[integer]") (Integer "[integer]" 1)))) (Block 35 (Block (ExprStmt (= "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 0))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 36 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")) (Integer "[integer]" 0))))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 37 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (Block 38 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]"))))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]")))))) (IfElseStmt (|| "[integer]" (! "[integer]" (Var "cur_tile" "35,1" "[integer]")) (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 40 (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfStmt (|| "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 41 (IfElseStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 42 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2)))) (ExprStmt ("f(x)" "[void]" (Var "add_score" "0,22" "[(integer n)void]") ( (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2))))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (IfStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 43 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))))))))))))) (IfStmt (Var "cur_tile" "35,1" "[integer]") (Block 44 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 45 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "c" "45,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]")))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (Var "c" "45,0" "[integer]") (Var "j" "35,3" "[integer]"))))) (IfStmt (|| "[integer]" (! "[integer]" (Var "moved" "34,1" "[integer]")) (== "[integer]" (v[x] "[integer]" (Var "c" "45,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")))) (ExprStmt (= "[integer]" (Var "moved" "34,1" "[integer]") (Integer "[integer]" 1)))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "c" "45,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]"))))))))
    ;; (ExprStmt (= "[integer]" (Var "i" "34,2" "[integer]") (Integer "[integer]" 0)))
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.const 0)
    (set_global $temp_i32)
    (get_global $temp_i32)
    (i32.store)
    (get_global $temp_i32)
    (drop)
    (block $loopbrk0
    (loop $loopaux0
    (block $loop0
    (get_global $fp)
    (i32.const 12)
    (i32.add)
    (i32.load)
    (i32.const 4)
    (i32.lt_s)
    (i32.eqz)
    (br_if $loopbrk0)
    ;; (Block 35 (Block (ExprStmt (= "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 0))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 36 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")) (Integer "[integer]" 0))))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 37 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (Block 38 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]"))))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]")))))) (IfElseStmt (|| "[integer]" (! "[integer]" (Var "cur_tile" "35,1" "[integer]")) (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 40 (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfStmt (|| "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 41 (IfElseStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 42 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2)))) (ExprStmt ("f(x)" "[void]" (Var "add_score" "0,22" "[(integer n)void]") ( (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2))))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (IfStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 43 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))))))))))))) (IfStmt (Var "cur_tile" "35,1" "[integer]") (Block 44 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))))) (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 45 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (ExprStmt (= "[integer]" (Var "c" "45,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]")))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (ExprStmt (= "[integer]" (Var "c" "45,0" "[integer]") (Var "j" "35,3" "[integer]"))))) (IfStmt (|| "[integer]" (! "[integer]" (Var "moved" "34,1" "[integer]")) (== "[integer]" (v[x] "[integer]" (Var "c" "45,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")))) (ExprStmt (= "[integer]" (Var "moved" "34,1" "[integer]") (Integer "[integer]" 1)))) (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "c" "45,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")))))))
    ;; {
      ;; (Block (ExprStmt (= "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 0))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0))))
      ;; {
        ;; (ExprStmt (= "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 0)))
        (get_global $fp)
        (i32.const 16)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
        ;; (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))
        (get_global $fp)
        (i32.const 20)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
      ;; }
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 36 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")) (Integer "[integer]" 0)))))
      ;; (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 40)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 40)
      (i32.add)
      (i32.load)
      (i32.const 4)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 36 (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")) (Integer "[integer]" 0))))
      ;; {
        ;; (ExprStmt (= "[integer]" (v[x] "[integer]" (Var "j" "35,3" "[integer]") (Var "new_row" "35,2" "[[4]integer]")) (Integer "[integer]" 0)))
        (get_global $fp)
        (i32.const 24)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 40)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 0)
        (set_global $temp_i32)
        (get_global $temp_i32)
        (i32.store)
        (get_global $temp_i32)
        (drop)
      ;; }
      )
      ;; (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1))))
      (get_global $fp)
      (i32.const 40)
      (i32.add)
      (get_global $fp)
      (i32.const 40)
      (i32.add)
      (i32.load)
      (i32.const 1)
      (i32.add)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (br $loopaux1)
      )
      )
      ;; (ForStmt (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0))) (< "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 4)) (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (+ "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 1)))) (Block 37 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (Block 38 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]"))))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]")))))) (IfElseStmt (|| "[integer]" (! "[integer]" (Var "cur_tile" "35,1" "[integer]")) (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 40 (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfStmt (|| "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 41 (IfElseStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 42 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2)))) (ExprStmt ("f(x)" "[void]" (Var "add_score" "0,22" "[(integer n)void]") ( (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2))))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (IfStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 43 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))))))))))
      ;; (ExprStmt (= "[integer]" (Var "j" "35,3" "[integer]") (Integer "[integer]" 0)))
      (get_global $fp)
      (i32.const 40)
      (i32.add)
      (i32.const 0)
      (set_global $temp_i32)
      (get_global $temp_i32)
      (i32.store)
      (get_global $temp_i32)
      (drop)
      (block $loopbrk1
      (loop $loopaux1
      (block $loop1
      (get_global $fp)
      (i32.const 40)
      (i32.add)
      (i32.load)
      (i32.const 4)
      (i32.lt_s)
      (i32.eqz)
      (br_if $loopbrk1)
      ;; (Block 37 (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (Block 38 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]"))))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]")))))) (IfElseStmt (|| "[integer]" (! "[integer]" (Var "cur_tile" "35,1" "[integer]")) (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 40 (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfStmt (|| "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 41 (IfElseStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 42 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2)))) (ExprStmt ("f(x)" "[void]" (Var "add_score" "0,22" "[(integer n)void]") ( (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2))))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (IfStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 43 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))))))))))))
      ;; {
        ;; (IfElseStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (Integer "[integer]" 1)) (Block 38 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]"))))) (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]"))))))
        (block $b0
        (block $b1
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.const 1)
        (i32.eq)
        (i32.eqz)
        (br_if $b1)
        ;; (Block 38 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]")))))
        ;; {
          ;; (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (- "[integer]" (Integer "[integer]" 3) (Var "j" "35,3" "[integer]"))))
          (get_global $fp)
          (i32.const 44)
          (i32.add)
          (i32.const 3)
          (get_global $fp)
          (i32.const 40)
          (i32.add)
          (i32.load)
          (i32.sub)
          (set_global $temp_i32)
          (get_global $temp_i32)
          (i32.store)
          (get_global $temp_i32)
          (drop)
        ;; }
        (br_if $b0)
        )
        ;; (IfStmt (== "[integer]" (Var "dir" "34,0" "[integer]") (- "[integer]" (Integer "[integer]" 1))) (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]")))))
        (block $b2
        (get_global $fp)
        (i32.const 4)
        (i32.add)
        (i32.load)
        (i32.const 1)
        (i32.eq)
        (i32.eqz)
        (br_if $b2)
        ;; (Block 39 (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]"))))
        ;; {
          ;; (ExprStmt (= "[integer]" (Var "c" "37,0" "[integer]") (Var "j" "35,3" "[integer]")))
          (get_global $fp)
          (i32.const 44)
          (i32.add)
          (get_global $fp)
          (i32.const 40)
          (i32.add)
          (i32.load)
          (set_global $temp_i32)
          (get_global $temp_i32)
          (i32.store)
          (get_global $temp_i32)
          (drop)
        ;; }
        )
        )
        ;; (IfElseStmt (|| "[integer]" (! "[integer]" (Var "cur_tile" "35,1" "[integer]")) (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 40 (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))) (IfStmt (|| "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))) (Block 41 (IfElseStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 42 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2)))) (ExprStmt ("f(x)" "[void]" (Var "add_score" "0,22" "[(integer n)void]") ( (* "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 2))))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (Integer "[integer]" 0)))) (IfStmt (== "[integer]" (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]"))) (Var "cur_tile" "35,1" "[integer]")) (Block 43 (ExprStmt (= "[integer]" (v[x] "[integer]" (= "[integer]" (Var "n" "35,0" "[integer]") (+ "[integer]" (Var "n" "35,0" "[integer]") (Integer "[integer]" 1))) (Var "new_row" "35,2" "[[4]integer]")) (Var "cur_tile" "35,1" "[integer]"))) (ExprStmt (= "[integer]" (Var "cur_tile" "35,1" "[integer]") (v[x] "[integer]" (Var "c" "37,0" "[integer]") (v[x] "[[4]integer]" (Var "i" "34,2" "[integer]") (Var "table" "0,8" "[[4][4]integer]")))))))))))
        (block $b3
        (block $b4
        (get_global $fp)
        (i32.const 20)
        (i32.add)
        (i32.load)
        (i32.eqz)
        (i32.const 136)
        (i32.const 16)
        (get_global $fp)
        (i32.const 12)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.const 4)
        (get_global $fp)
        (i32.const 44)
        (i32.add)
        (i32.load)
        (i32.mul)
        (i32.add)
        (i32.load)
