INT : int
ID : globalzao
ASSIGN : =
INT_VAL : 2
SEMI : ;
FLOAT : float
ID : b
ASSIGN : =
INT_VAL : 1
SEMI : ;
TYPEDEF : typedef
UNSIGNED : unsigned
INT : int
ID : uint
SEMI : ;
INT : int
ID : test1
LPAR : (
RPAR : )
SEMI : ;
INT : int
ID : test2
LPAR : (
VOID : void
RPAR : )
SEMI : ;
INT : int
ID : test3
LPAR : (
INT : int
ID : a
COMMA : ,
INT : int
ID : b
RPAR : )
SEMI : ;
INT : int
ID : test4
LPAR : (
INT : int
ID : a
COMMA : ,
INT : int
RPAR : )
SEMI : ;
INT : int
ID : test4
LPAR : (
INT : int
ID : a
COMMA : ,
INT : int
ID : b
RPAR : )
LCB : {
RETURN : return
ID : a
PLUS : +
ID : b
SEMI : ;
RCB : }
INT : int
ID : test5
LPAR : (
INT : int
COMMA : ,
INT : int
RPAR : )
SEMI : ;
INT : int
ID : test5
LPAR : (
INT : int
ID : a
COMMA : ,
INT : int
ID : b
RPAR : )
LCB : {
RETURN : return
ID : a
MINUS : -
ID : b
SEMI : ;
RCB : }
INT : int
ID : test6
LPAR : (
INT : int
STAR : *
COMMA : ,
INT : int
STAR : *
RPAR : )
SEMI : ;
INT : int
ID : test7
LPAR : (
INT : int
STAR : *
LB : [
INT_VAL : 8
RB : ]
RPAR : )
SEMI : ;
INT : int
ID : test8
LPAR : (
INT : int
LPAR : (
STAR : *
ID : cb
LB : [
RB : ]
RPAR : )
LPAR : (
RPAR : )
RPAR : )
SEMI : ;
INT : int
ID : test8
LPAR : (
INT : int
LPAR : (
STAR : *
ID : cb
LB : [
INT_VAL : 2
RB : ]
RPAR : )
LPAR : (
RPAR : )
RPAR : )
LCB : {
RETURN : return
ID : cb
LB : [
INT_VAL : 0
RB : ]
LPAR : (
RPAR : )
SEMI : ;
RCB : }
INT : int
ID : voidp_to_int
LPAR : (
VOID : void
STAR : *
ID : p
RPAR : )
LCB : {
INT : int
STAR : *
ID : ip
ASSIGN : =
LPAR : (
INT : int
STAR : *
RPAR : )
ID : p
SEMI : ;
RETURN : return
STAR : *
ID : ip
SEMI : ;
RCB : }
VOID : void
ID : varargs
LPAR : (
INT : int
COMMA : ,
ELLIPSIS : ...
RPAR : )
SEMI : ;
VOID : void
ID : varargs
LPAR : (
INT : int
ID : dang
COMMA : ,
ELLIPSIS : ...
RPAR : )
LCB : {
RCB : }
TYPEDEF : typedef
STRUCT : struct
ID : ponto
LCB : {
DOUBLE : double
ID : x
SEMI : ;
DOUBLE : double
ID : y
SEMI : ;
RCB : }
ID : ponto_t
SEMI : ;
INT : int
ID : main
LPAR : (
RPAR : )
LCB : {
CHAR : char
STAR : *
ID : p
ASSIGN : =
STR_VAL : "Este programa nÃ£o imprime \"Hello World\""
SEMI : ;
STRUCT : struct
ID : ponto
ID : ponto
ASSIGN : =
LCB : {
DOT : .
ID : x
ASSIGN : =
REAL_VAL : 10.0
COMMA : ,
DOT : .
ID : y
ASSIGN : =
REAL_VAL : 0.0
RCB : }
SEMI : ;
ID : ponto
DOT : .
ID : y
ASSIGN : =
INT_VAL : 20
SEMI : ;
INT : int
ID : vec
LB : [
INT_VAL : 4
RB : ]
LB : [
INT_VAL : 4
RB : ]
ASSIGN : =
LCB : {
LCB : {
INT_VAL : 0
RCB : }
RCB : }
SEMI : ;
MINUS : -
ID : vec
LB : [
INT_VAL : 1
RB : ]
LB : [
INT_VAL : 1
RB : ]
PLUSPLUS : ++
SEMI : ;
CHAR : char
ID : k
ASSIGN : =
CHAR_VAL : 'A'
SEMI : ;
ID : k
ASSIGN : =
CHAR_VAL : '\0'
SEMI : ;
ID : k
ASSIGN : =
CHAR_VAL : '\n'
SEMI : ;
ID : k
ASSIGN : =
CHAR_VAL : '\''
SEMI : ;
INT : int
ID : a
ASSIGN : =
INT_VAL : 2
COMMA : ,
ID : b
SEMI : ;
CONST : const
INT : int
ID : _01
SEMI : ;
INT : int
STAR : *
ID : ap
ASSIGN : =
AMPER : &
ID : a
SEMI : ;
STAR : *
ID : ap
ASSIGN : =
INT_VAL : 7
SEMI : ;
ID : a
EQ : ==
ID : b
SEMI : ;
INT : int
ID : c
ASSIGN : =
ID : test4
LPAR : (
ID : a
COMMA : ,
ID : b
RPAR : )
SEMI : ;
IF : if
LPAR : (
ID : b
GT : >
INT_VAL : 1
RPAR : )
LCB : {
ID : a
ASSIGN : =
INT_VAL : 77
SEMI : ;
RCB : }
ELSE : else
ID : a
ASSIGN : =
INT_VAL : 100
SEMI : ;
INT : int
ID : e
ASSIGN : =
INT_VAL : 1
SEMI : ;
INT : int
ID : j
ASSIGN : =
INT_VAL : 2
SEMI : ;
INT : int
ID : v
LB : [
INT_VAL : 3
RB : ]
ASSIGN : =
LCB : {
ID : e
COMMA : ,
ID : j
COMMA : ,
INT_VAL : 3
RCB : }
SEMI : ;
INT : int
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
MINUS : -
ID : i
PLUSPLUS : ++
SEMI : ;
WHILE : while
LPAR : (
ID : i
LT : <
INT_VAL : 5
RPAR : )
ID : i
PLUSPLUS : ++
SEMI : ;
FOR : for
LPAR : (
INT : int
ID : i
ASSIGN : =
INT_VAL : 0
COMMA : ,
ID : b
COMMA : ,
ID : c
SEMI : ;
ID : i
LT : <
INT_VAL : 7
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
ID : a
PLUSPLUS : ++
SEMI : ;
ID : printf
LPAR : (
STR_VAL : "%d\n"
COMMA : ,
ID : a
RPAR : )
SEMI : ;
SWITCH : switch
LPAR : (
ID : a
RPAR : )
LCB : {
CASE : case
LPAR : (
INT_VAL : 107
RPAR : )
COLON : :
LCB : {
ID : printf
LPAR : (
STR_VAL : "%d\n"
COMMA : ,
ID : a
RPAR : )
SEMI : ;
CASE : case
INT_VAL : 1
COLON : :
SEMI : ;
BREAK : break
SEMI : ;
RCB : }
RCB : }
DO : do
ID : i
PLUSPLUS : ++
SEMI : ;
WHILE : while
LPAR : (
ID : i
LT : <
INT_VAL : 10
RPAR : )
SEMI : ;
INT : int
ID : flag
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : start
COLON : :
IF : if
LPAR : (
ID : flag
RPAR : )
GOTO : goto
ID : end
SEMI : ;
ID : flag
ASSIGN : =
INT_VAL : 1
SEMI : ;
ID : end
COLON : :
SEMI : ;
RETURN : return
INT_VAL : 0
SEMI : ;
RCB : }
