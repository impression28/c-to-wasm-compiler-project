VOID : void
ID : srand
LPAR : (
INT : int
RPAR : )
SEMI : ;
INT : int
ID : rand
LPAR : (
RPAR : )
SEMI : ;
VOID : void
ID : printf
LPAR : (
CONST : const
CHAR : char
STAR : *
RPAR : )
SEMI : ;
INT : int
ID : scanf
LPAR : (
CONST : const
CHAR : char
STAR : *
RPAR : )
SEMI : ;
CONST : const
CHAR : char
ID : EMPTY_CELL
LB : [
RB : ]
ASSIGN : =
STR_VAL : "        "
SEMI : ;
CONST : const
CHAR : char
ID : TABLE_WIDTH
ASSIGN : =
INT_VAL : 5
PLUS : +
INT_VAL : 4
STAR : *
INT_VAL : 8
SEMI : ;
INT : int
ID : score
ASSIGN : =
INT_VAL : 0
SEMI : ;
INT : int
ID : record
ASSIGN : =
INT_VAL : 0
SEMI : ;
INT : int
ID : table
LB : [
INT_VAL : 4
RB : ]
LB : [
INT_VAL : 4
RB : ]
SEMI : ;
VOID : void
ID : clear_screen
LPAR : (
RPAR : )
LCB : {
RCB : }
VOID : void
ID : repeatPrint
LPAR : (
CHAR : char
ID : c
LB : [
RB : ]
COMMA : ,
INT : int
ID : n
RPAR : )
LCB : {
INT : int
ID : i
SEMI : ;
FOR : for
LPAR : (
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
ID : n
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
RCB : }
RCB : }
VOID : void
ID : table_vpadding
LPAR : (
INT : int
ID : r
RPAR : )
LCB : {
ID : printf
LPAR : (
STR_VAL : "|"
RPAR : )
SEMI : ;
INT : int
ID : c
SEMI : ;
FOR : for
LPAR : (
ID : c
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : c
LT : <
INT_VAL : 4
SEMI : ;
ID : c
PLUSPLUS : ++
RPAR : )
LCB : {
ID : repeatPrint
LPAR : (
STR_VAL : " "
COMMA : ,
INT_VAL : 8
RPAR : )
SEMI : ;
ID : printf
LPAR : (
STR_VAL : "|"
RPAR : )
SEMI : ;
RCB : }
ID : printf
LPAR : (
STR_VAL : "\n"
RPAR : )
SEMI : ;
RCB : }
VOID : void
ID : table_hline
LPAR : (
RPAR : )
LCB : {
ID : repeatPrint
LPAR : (
STR_VAL : "-"
COMMA : ,
ID : TABLE_WIDTH
RPAR : )
SEMI : ;
ID : printf
LPAR : (
STR_VAL : "\n"
RPAR : )
SEMI : ;
RCB : }
VOID : void
ID : render_table
LPAR : (
RPAR : )
LCB : {
ID : table_hline
LPAR : (
RPAR : )
SEMI : ;
INT : int
ID : r
COMMA : ,
ID : c
SEMI : ;
FOR : for
LPAR : (
ID : r
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : r
LT : <
INT_VAL : 4
SEMI : ;
ID : r
PLUSPLUS : ++
RPAR : )
LCB : {
ID : table_vpadding
LPAR : (
ID : r
RPAR : )
SEMI : ;
ID : printf
LPAR : (
STR_VAL : "|"
RPAR : )
SEMI : ;
FOR : for
LPAR : (
ID : c
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : c
LT : <
INT_VAL : 4
SEMI : ;
ID : c
PLUSPLUS : ++
RPAR : )
LCB : {
INT : int
ID : v
ASSIGN : =
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : c
RB : ]
SEMI : ;
IF : if
LPAR : (
ID : v
RPAR : )
LCB : {
ID : printf
LPAR : (
STR_VAL : "|"
RPAR : )
SEMI : ;
RCB : }
ELSE : else
LCB : {
ID : repeatPrint
LPAR : (
STR_VAL : " "
COMMA : ,
INT_VAL : 8
RPAR : )
SEMI : ;
ID : printf
LPAR : (
STR_VAL : "|"
RPAR : )
SEMI : ;
RCB : }
RCB : }
ID : printf
LPAR : (
STR_VAL : "\n"
RPAR : )
SEMI : ;
ID : table_vpadding
LPAR : (
ID : r
RPAR : )
SEMI : ;
ID : table_hline
LPAR : (
RPAR : )
SEMI : ;
RCB : }
RCB : }
VOID : void
ID : render_info
LPAR : (
RPAR : )
LCB : {
RCB : }
VOID : void
ID : render_info_2
LPAR : (
RPAR : )
LCB : {
ID : printf
LPAR : (
STR_VAL : "\nPress Q to quit.\n"
RPAR : )
SEMI : ;
RCB : }
VOID : void
ID : render_game
LPAR : (
RPAR : )
LCB : {
ID : render_info
LPAR : (
RPAR : )
SEMI : ;
ID : render_table
LPAR : (
RPAR : )
SEMI : ;
ID : render_info_2
LPAR : (
RPAR : )
SEMI : ;
RCB : }
INT : int
ID : count_empty_tiles
LPAR : (
RPAR : )
LCB : {
INT : int
ID : i
COMMA : ,
ID : j
COMMA : ,
ID : c
ASSIGN : =
INT_VAL : 0
SEMI : ;
FOR : for
LPAR : (
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
INT_VAL : 4
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
FOR : for
LPAR : (
ID : j
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : j
LT : <
INT_VAL : 4
SEMI : ;
ID : j
PLUSPLUS : ++
RPAR : )
LCB : {
IF : if
LPAR : (
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : j
RB : ]
EQ : ==
INT_VAL : 0
RPAR : )
LCB : {
ID : c
PLUSPLUS : ++
SEMI : ;
RCB : }
RCB : }
RCB : }
RETURN : return
ID : c
SEMI : ;
RCB : }
VOID : void
ID : insert_random_tile
LPAR : (
RPAR : )
LCB : {
INT : int
ID : empt
COMMA : ,
ID : n
SEMI : ;
ID : empt
ASSIGN : =
ID : count_empty_tiles
LPAR : (
RPAR : )
SEMI : ;
IF : if
LPAR : (
ID : empt
RPAR : )
LCB : {
ID : n
ASSIGN : =
ID : rand
LPAR : (
RPAR : )
PERC : %
ID : empt
SEMI : ;
INT : int
ID : i
COMMA : ,
ID : j
COMMA : ,
ID : c
ASSIGN : =
INT_VAL : 0
SEMI : ;
FOR : for
LPAR : (
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
INT_VAL : 4
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
FOR : for
LPAR : (
ID : j
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : j
LT : <
INT_VAL : 4
SEMI : ;
ID : j
PLUSPLUS : ++
RPAR : )
LCB : {
IF : if
LPAR : (
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : j
RB : ]
EQ : ==
INT_VAL : 0
RPAR : )
LCB : {
IF : if
LPAR : (
ID : c
EQ : ==
ID : n
RPAR : )
LCB : {
INT : int
ID : r
ASSIGN : =
ID : rand
LPAR : (
RPAR : )
SEMI : ;
IF : if
LPAR : (
ID : r
PERC : %
INT_VAL : 10
EQ : ==
INT_VAL : 0
RPAR : )
LCB : {
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : j
RB : ]
ASSIGN : =
INT_VAL : 4
SEMI : ;
RCB : }
ELSE : else
LCB : {
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : j
RB : ]
ASSIGN : =
INT_VAL : 2
SEMI : ;
RCB : }
RCB : }
ID : c
PLUSPLUS : ++
SEMI : ;
RCB : }
RCB : }
RCB : }
RCB : }
RCB : }
VOID : void
ID : init_table
LPAR : (
RPAR : )
LCB : {
ID : insert_random_tile
LPAR : (
RPAR : )
SEMI : ;
ID : insert_random_tile
LPAR : (
RPAR : )
SEMI : ;
RCB : }
VOID : void
ID : clean_table
LPAR : (
RPAR : )
LCB : {
FOR : for
LPAR : (
INT : int
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
INT_VAL : 4
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
FOR : for
LPAR : (
INT : int
ID : j
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : j
LT : <
INT_VAL : 4
SEMI : ;
ID : j
PLUSPLUS : ++
RPAR : )
LCB : {
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : j
RB : ]
ASSIGN : =
INT_VAL : 0
SEMI : ;
RCB : }
RCB : }
RCB : }
VOID : void
ID : update_record
LPAR : (
INT : int
ID : n
RPAR : )
LCB : {
ID : record
ASSIGN : =
ID : n
SEMI : ;
RCB : }
VOID : void
ID : add_score
LPAR : (
INT : int
ID : n
RPAR : )
LCB : {
ID : score
ASSIGN : =
ID : score
PLUS : +
ID : n
SEMI : ;
IF : if
LPAR : (
ID : score
GT : >
ID : record
RPAR : )
LCB : {
ID : update_record
LPAR : (
ID : score
RPAR : )
SEMI : ;
RCB : }
RCB : }
INT : int
ID : move_table_hor
LPAR : (
INT : int
ID : dir
RPAR : )
LCB : {
INT : int
ID : i
COMMA : ,
ID : j
COMMA : ,
ID : c
SEMI : ;
INT : int
ID : moved
ASSIGN : =
INT_VAL : 0
SEMI : ;
FOR : for
LPAR : (
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
INT_VAL : 4
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
INT : int
ID : n
ASSIGN : =
INT_VAL : 0
COMMA : ,
ID : cur_tile
ASSIGN : =
INT_VAL : 0
SEMI : ;
INT : int
ID : new_row
LB : [
INT_VAL : 4
RB : ]
SEMI : ;
FOR : for
LPAR : (
INT : int
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
INT_VAL : 4
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
ID : new_row
LB : [
ID : i
RB : ]
ASSIGN : =
INT_VAL : 0
SEMI : ;
RCB : }
FOR : for
LPAR : (
ID : j
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : j
LT : <
INT_VAL : 4
SEMI : ;
ID : j
PLUSPLUS : ++
RPAR : )
LCB : {
IF : if
LPAR : (
ID : dir
EQ : ==
PLUS : +
INT_VAL : 1
RPAR : )
LCB : {
ID : c
ASSIGN : =
INT_VAL : 3
MINUS : -
ID : j
SEMI : ;
RCB : }
ELSE : else
IF : if
LPAR : (
ID : dir
EQ : ==
MINUS : -
INT_VAL : 1
RPAR : )
LCB : {
ID : c
ASSIGN : =
ID : j
SEMI : ;
RCB : }
IF : if
LPAR : (
NOT : !
ID : cur_tile
AND : &&
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
RPAR : )
LCB : {
ID : cur_tile
ASSIGN : =
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
SEMI : ;
RCB : }
ELSE : else
IF : if
LPAR : (
ID : cur_tile
AND : &&
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
RPAR : )
LCB : {
IF : if
LPAR : (
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
EQ : ==
ID : cur_tile
RPAR : )
LCB : {
ID : new_row
LB : [
ID : n
PLUSPLUS : ++
RB : ]
ASSIGN : =
ID : cur_tile
STAR : *
INT_VAL : 2
SEMI : ;
ID : add_score
LPAR : (
ID : cur_tile
STAR : *
INT_VAL : 2
RPAR : )
SEMI : ;
ID : cur_tile
ASSIGN : =
INT_VAL : 0
SEMI : ;
RCB : }
ELSE : else
IF : if
LPAR : (
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
NEQ : !=
ID : cur_tile
RPAR : )
LCB : {
ID : new_row
LB : [
ID : n
PLUSPLUS : ++
RB : ]
ASSIGN : =
ID : cur_tile
SEMI : ;
ID : cur_tile
ASSIGN : =
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
SEMI : ;
RCB : }
RCB : }
RCB : }
IF : if
LPAR : (
ID : cur_tile
RPAR : )
LCB : {
ID : new_row
LB : [
ID : n
PLUSPLUS : ++
RB : ]
ASSIGN : =
ID : cur_tile
SEMI : ;
RCB : }
FOR : for
LPAR : (
ID : j
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : j
LT : <
INT_VAL : 4
SEMI : ;
ID : j
PLUSPLUS : ++
RPAR : )
LCB : {
IF : if
LPAR : (
ID : dir
EQ : ==
PLUS : +
INT_VAL : 1
RPAR : )
ID : c
ASSIGN : =
INT_VAL : 3
MINUS : -
ID : j
SEMI : ;
ELSE : else
IF : if
LPAR : (
ID : dir
EQ : ==
MINUS : -
INT_VAL : 1
RPAR : )
ID : c
ASSIGN : =
ID : j
SEMI : ;
IF : if
LPAR : (
NOT : !
ID : moved
AND : &&
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
NEQ : !=
ID : new_row
LB : [
ID : j
RB : ]
RPAR : )
ID : moved
ASSIGN : =
INT_VAL : 1
SEMI : ;
ID : table
LB : [
ID : i
RB : ]
LB : [
ID : c
RB : ]
ASSIGN : =
ID : new_row
LB : [
ID : j
RB : ]
SEMI : ;
RCB : }
RCB : }
RETURN : return
ID : moved
SEMI : ;
RCB : }
INT : int
ID : move_table_vert
LPAR : (
INT : int
ID : dir
RPAR : )
LCB : {
INT : int
ID : i
COMMA : ,
ID : j
COMMA : ,
ID : r
SEMI : ;
INT : int
ID : moved
ASSIGN : =
INT_VAL : 0
SEMI : ;
FOR : for
LPAR : (
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
INT_VAL : 4
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
INT : int
ID : n
ASSIGN : =
INT_VAL : 0
COMMA : ,
ID : cur_tile
ASSIGN : =
INT_VAL : 0
SEMI : ;
INT : int
ID : new_col
LB : [
INT_VAL : 4
RB : ]
SEMI : ;
FOR : for
LPAR : (
INT : int
ID : i
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : i
LT : <
INT_VAL : 4
SEMI : ;
ID : i
PLUSPLUS : ++
RPAR : )
LCB : {
ID : new_col
LB : [
ID : i
RB : ]
ASSIGN : =
INT_VAL : 0
SEMI : ;
RCB : }
FOR : for
LPAR : (
ID : j
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : j
LT : <
INT_VAL : 4
SEMI : ;
ID : j
PLUSPLUS : ++
RPAR : )
LCB : {
IF : if
LPAR : (
ID : dir
EQ : ==
PLUS : +
INT_VAL : 1
RPAR : )
ID : r
ASSIGN : =
ID : j
SEMI : ;
ELSE : else
IF : if
LPAR : (
ID : dir
EQ : ==
MINUS : -
INT_VAL : 1
RPAR : )
ID : r
ASSIGN : =
INT_VAL : 3
MINUS : -
ID : j
SEMI : ;
IF : if
LPAR : (
NOT : !
ID : cur_tile
AND : &&
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
RPAR : )
LCB : {
ID : cur_tile
ASSIGN : =
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
SEMI : ;
RCB : }
ELSE : else
IF : if
LPAR : (
ID : cur_tile
AND : &&
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
RPAR : )
LCB : {
IF : if
LPAR : (
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
EQ : ==
ID : cur_tile
RPAR : )
LCB : {
ID : new_col
LB : [
ID : n
PLUSPLUS : ++
RB : ]
ASSIGN : =
ID : cur_tile
STAR : *
INT_VAL : 2
SEMI : ;
ID : add_score
LPAR : (
ID : cur_tile
STAR : *
INT_VAL : 2
RPAR : )
SEMI : ;
ID : cur_tile
ASSIGN : =
INT_VAL : 0
SEMI : ;
RCB : }
ELSE : else
IF : if
LPAR : (
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
NEQ : !=
ID : cur_tile
RPAR : )
LCB : {
ID : new_col
LB : [
ID : n
PLUSPLUS : ++
RB : ]
ASSIGN : =
ID : cur_tile
SEMI : ;
ID : cur_tile
ASSIGN : =
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
SEMI : ;
RCB : }
RCB : }
RCB : }
IF : if
LPAR : (
ID : cur_tile
RPAR : )
LCB : {
ID : new_col
LB : [
ID : n
PLUSPLUS : ++
RB : ]
ASSIGN : =
ID : cur_tile
SEMI : ;
RCB : }
FOR : for
LPAR : (
ID : j
ASSIGN : =
INT_VAL : 0
SEMI : ;
ID : j
LT : <
INT_VAL : 4
SEMI : ;
ID : j
PLUSPLUS : ++
RPAR : )
LCB : {
IF : if
LPAR : (
ID : dir
EQ : ==
PLUS : +
INT_VAL : 1
RPAR : )
LCB : {
ID : r
ASSIGN : =
ID : j
SEMI : ;
RCB : }
ELSE : else
IF : if
LPAR : (
ID : dir
EQ : ==
MINUS : -
INT_VAL : 1
RPAR : )
LCB : {
ID : r
ASSIGN : =
INT_VAL : 3
MINUS : -
ID : j
SEMI : ;
RCB : }
IF : if
LPAR : (
NOT : !
ID : moved
AND : &&
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
NEQ : !=
ID : new_col
LB : [
ID : j
RB : ]
RPAR : )
ID : moved
ASSIGN : =
INT_VAL : 1
SEMI : ;
ID : table
LB : [
ID : r
RB : ]
LB : [
ID : i
RB : ]
ASSIGN : =
ID : new_col
LB : [
ID : j
RB : ]
SEMI : ;
RCB : }
RCB : }
RETURN : return
ID : moved
SEMI : ;
RCB : }
VOID : void
ID : reset_game
LPAR : (
RPAR : )
LCB : {
ID : clean_table
LPAR : (
RPAR : )
SEMI : ;
ID : init_table
LPAR : (
RPAR : )
SEMI : ;
ID : clear_screen
LPAR : (
RPAR : )
SEMI : ;
ID : render_game
LPAR : (
RPAR : )
SEMI : ;
RCB : }
INT : int
ID : main
LPAR : (
RPAR : )
LCB : {
ID : srand
LPAR : (
INT_VAL : 0
RPAR : )
SEMI : ;
ID : clean_table
LPAR : (
RPAR : )
SEMI : ;
ID : init_table
LPAR : (
RPAR : )
SEMI : ;
ID : clear_screen
LPAR : (
RPAR : )
SEMI : ;
ID : render_game
LPAR : (
RPAR : )
SEMI : ;
WHILE : while
LPAR : (
INT_VAL : 1
RPAR : )
LCB : {
CHAR : char
ID : ch
SEMI : ;
INT : int
ID : ret
SEMI : ;
IF : if
LPAR : (
ID : ret
NEQ : !=
INT_VAL : 1
RPAR : )
LCB : {
CONTINUE : continue
SEMI : ;
RCB : }
IF : if
LPAR : (
LPAR : (
CHAR : char
RPAR : )
ID : ch
EQ : ==
CHAR_VAL : 'R'
OR : ||
LPAR : (
CHAR : char
RPAR : )
ID : ch
EQ : ==
CHAR_VAL : 'r'
RPAR : )
LCB : {
ID : reset_game
LPAR : (
RPAR : )
SEMI : ;
RCB : }
ELSE : else
IF : if
LPAR : (
LPAR : (
CHAR : char
RPAR : )
ID : ch
EQ : ==
CHAR_VAL : 'Q'
OR : ||
LPAR : (
CHAR : char
RPAR : )
ID : ch
EQ : ==
CHAR_VAL : 'q'
RPAR : )
LCB : {
BREAK : break
SEMI : ;
RCB : }
ELSE : else
LCB : {
INT : int
ID : moved
ASSIGN : =
INT_VAL : 0
SEMI : ;
SWITCH : switch
LPAR : (
ID : ch
RPAR : )
LCB : {
CASE : case
CHAR_VAL : 'w'
COLON : :
CASE : case
CHAR_VAL : 'W'
COLON : :
ID : moved
ASSIGN : =
ID : move_table_vert
LPAR : (
PLUS : +
INT_VAL : 1
RPAR : )
SEMI : ;
BREAK : break
SEMI : ;
CASE : case
CHAR_VAL : 's'
COLON : :
CASE : case
CHAR_VAL : 'S'
COLON : :
ID : moved
ASSIGN : =
ID : move_table_vert
LPAR : (
MINUS : -
INT_VAL : 1
RPAR : )
SEMI : ;
BREAK : break
SEMI : ;
CASE : case
CHAR_VAL : 'd'
COLON : :
CASE : case
CHAR_VAL : 'D'
COLON : :
ID : moved
ASSIGN : =
ID : move_table_hor
LPAR : (
PLUS : +
INT_VAL : 1
RPAR : )
SEMI : ;
BREAK : break
SEMI : ;
CASE : case
CHAR_VAL : 'a'
COLON : :
CASE : case
CHAR_VAL : 'A'
COLON : :
ID : moved
ASSIGN : =
ID : move_table_hor
LPAR : (
MINUS : -
INT_VAL : 1
RPAR : )
SEMI : ;
BREAK : break
SEMI : ;
RCB : }
IF : if
LPAR : (
ID : moved
RPAR : )
LCB : {
ID : insert_random_tile
LPAR : (
RPAR : )
SEMI : ;
RCB : }
ID : clear_screen
LPAR : (
RPAR : )
SEMI : ;
ID : render_game
LPAR : (
RPAR : )
SEMI : ;
IF : if
LPAR : (
ID : count_empty_tiles
LPAR : (
RPAR : )
EQ : ==
INT_VAL : 0
RPAR : )
LCB : {
ID : clear_screen
LPAR : (
RPAR : )
SEMI : ;
ID : render_info
LPAR : (
RPAR : )
SEMI : ;
ID : render_table
LPAR : (
RPAR : )
SEMI : ;
ID : printf
LPAR : (
STR_VAL : "GAME OVER\n"
RPAR : )
SEMI : ;
ID : printf
LPAR : (
STR_VAL : "press R to start a new game\n"
RPAR : )
SEMI : ;
CHAR : char
ID : ch
SEMI : ;
INT : int
ID : ret
SEMI : ;
IF : if
LPAR : (
ID : ret
NEQ : !=
INT_VAL : 1
RPAR : )
LCB : {
BREAK : break
SEMI : ;
RCB : }
IF : if
LPAR : (
LPAR : (
CHAR : char
RPAR : )
ID : ch
EQ : ==
CHAR_VAL : 'R'
OR : ||
LPAR : (
CHAR : char
RPAR : )
ID : ch
EQ : ==
CHAR_VAL : 'r'
RPAR : )
LCB : {
ID : reset_game
LPAR : (
RPAR : )
SEMI : ;
CONTINUE : continue
SEMI : ;
RCB : }
ELSE : else
LCB : {
BREAK : break
SEMI : ;
RCB : }
RCB : }
RCB : }
RCB : }
ID : clear_screen
LPAR : (
RPAR : )
SEMI : ;
RETURN : return
INT_VAL : 0
SEMI : ;
RCB : }
